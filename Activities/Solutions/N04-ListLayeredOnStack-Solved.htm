<!doctype html>
<html>
<head>
<meta http-equiv="Content-Language" content="en-us">
<meta charset="utf-8">
   <meta name="Author" content="Dr. Holly">
   <title>List Layered on Stack</title>
<link href="../../css/style.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>List Layered on Two Stacks</h1>
<table border="1" width="50%">
  <tr>
      <td width="33%">
        <p align="center">
		<img border="0" src="../N04-l3-01p1.jpg" width="140" height="79"></p>
    <p align="center">List z1</p></td>
      <td width="33%">
        <p align="center"><img src="../N04-List2PrivatePart.png" width="371" height="192" alt="correspondence"></p></td>
      <td width="33%"><pre><code>// Stack1 standard Operations
Stack1 ();
~Stack1 ();
void clear (void);
void transferFrom(Stack1&amp; source);
Stack1&amp; operator = (Stack1&amp; rhs);

// Stack1 Specific Operations
void push (T&amp; x);
void pop (T&amp; x);
void replaceTop(T&amp; x);
T&amp; top (void);
Integer length (void);
</code></pre>
     </td>
    </tr>
  </table>
  <p align="left">&nbsp;</p>
	<p align="left"><tt><b>Abstract value:</b><br>
  z1 = &lt;&quot;pi&quot;,&quot;gr&quot;,&quot;bl&quot;&gt; &lt;&quot;ye&quot;,&quot;r&quot;&gt;</tt>
	<br>
	<tt>&nbsp;&nbsp;
  z1.left = &lt;&quot;pi&quot;,&quot;gr&quot;,&quot;bl&quot;&gt;<br>
&nbsp;&nbsp; z1.right = &lt;&quot;ye&quot;,&quot;r&quot;&gt;<br>
	<br>
	<b>Internal representation using 2 stacks:</b></tt><br><tt>&nbsp;&nbsp; leftStack = &lt;&quot;bl&quot;,&quot;gr&quot;,&quot;pi&quot;&gt;<br>
&nbsp;&nbsp; rightStack = &lt;&quot;ye&quot;,&quot;r&quot;&gt;</tt></p>
	<hr>
	<h4 align="left">Implementation for addRightFront</h4>
 

	<div align="left">
	<pre><code><b>template</b> &lt;<b>class</b> T&gt;
<b>void</b> List1&lt;T&gt;::addRightFront (T&amp; x)
{
   rightStack.push(x);
}  // addRightFront</code></pre></div>


	<hr>
	<h4 align="left">Implement the following:</h4>

  <div align="left">
    <pre><code><b>template</b> &lt;<b>class</b> T&gt;
<b>void</b> List1&lt;T&gt;::replaceRightFront (T&amp; x)
{
   rightStack.replaceTop(x);
}  // replaceRightFront 


<b>template</b> &lt;<b>class</b> T&gt;
<b>void</b> List1&lt;T&gt;::advance (<b>void</b>)
{
   T x;
   rightStack.pop(x);
   leftStack.push(x);
}  // advance 
<b></b>

<b>template</b> &lt;<b>class</b> T&gt;
<b>void</b> List1&lt;T&gt;::moveToFinish (<b>void</b>)
{
   <b>for</b> (int k = 0, z = rightStack.length(); k &lt; z; k++) {
      T x;
      rightStack.pop(x);
      leftStack.push(x);
   } // end for
}  // moveToFinish<b></b>


<b>template</b> &lt;<b>class</b> T&gt;
Integer List1&lt;T&gt;::rightLength (<b>void</b>)
{
   <b>return</b> rightStack.length();
}  // rightLength 

 </code></pre></div>

</body>
</html>